/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


/** Method_1 */
/** Runtime: 0 ms, faster than 100.00% of C++ online submissions for Invert Binary Tree. */

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
    
        if(root==NULL){
            return root;
        }
        else{
            
            TreeNode *temp=root->left;
            root->left=invertTree(root->right);
            root->right=invertTree(temp);
        }
        return root;
    }
};


/** This is the method_2 having run time 4ms */
/*
class Solution{
    public:
        TreeNode* invertTree(TreeNode* root){
            if(root){
                invertTree(root->left);
                invertTree(root->right);
                TreeNode* temp=root->left;
                root->left=root->right;
                root->right=temp;
            }
            return root;
        }
};

*/


